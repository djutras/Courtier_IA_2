import { sendMessageToOpenAI, Language } from '../services/openai';

type Message = { role: "user" | "assistant"; content: string };

const WELCOME_MESSAGES = {
  fr: "Bonjour! PrÃªt Ã  me laisser dÃ©nicher la meilleure offre pour un vÃ©hicule ? Auto, VUS ou pick-up, je peux vous aider ! Quelle MARQUE recherchez-vous ?",
  en: "Hello! Ready to let me find the best deal for a vehicle? Car, SUV or pickup, I can help! What BRAND are you looking for?"
};

const BRAND_KEYWORDS = [
  'toyota', 'honda', 'ford', 'chevrolet', 'nissan', 'mazda', 'hyundai', 'kia', 
  'volkswagen', 'bmw', 'mercedes', 'audi', 'lexus', 'acura', 'infiniti', 'subaru', 
  'mitsubishi', 'jeep', 'ram', 'dodge', 'chrysler', 'cadillac', 'buick', 'gmc', 
  'lincoln', 'volvo', 'porsche', 'tesla', 'genesis'
];

export async function chatWithSam(history: Message[], language: Language = 'fr'): Promise<string> {
  // For the very first interaction, always start with the welcome message
  if (history.length === 1 && history[0].role === 'user') {
    // First user message should trigger the brand question with progress tracking
    const userMessage = history[0].content.toLowerCase();
    
    // If user already provided a brand name, acknowledge it and move to question 2
    const hasBrand = BRAND_KEYWORDS.some(brand => userMessage.includes(brand));
    
    if (hasBrand) {
      const brand = history[0].content;
      const summaryFormat = language === 'en' ? 
        `ðŸ“‹ **SUMMARY** (Question 1/17 completed)
âœ… Brand: ${brand}
âœ… New/Used: ---
âœ… Model: ---
âœ… Trim: ---
âœ… Powertrain: ---
âœ… Drivetrain: ---
âœ… Options: ---
âœ… Colors: ---
âœ… Payment: ---
âœ… Term/Budget: ---
âœ… Trade-in: ---
âœ… Trade-in details: ---
âœ… # Dealerships: ---
âœ… Preferred contact: ---
âœ… Email/Phone: ---
âœ… Privacy: ---

---

New or used? (N/U)` :
        `ðŸ“‹ **RÃ‰CAPITULATIF** (Question 1/17 complÃ©tÃ©es)
âœ… Marque : ${brand}
âœ… Neuf/UsagÃ© : ---
âœ… ModÃ¨le : ---
âœ… Finition : ---
âœ… Motopropulseur : ---
âœ… Transmission : ---
âœ… Options : ---
âœ… Couleurs : ---
âœ… Paiement : ---
âœ… DurÃ©e/Budget : ---
âœ… Ã‰change : ---
âœ… DÃ©tails Ã©change : ---
âœ… Nb concessionnaires : ---
âœ… Contact prÃ©fÃ©rÃ© : ---
âœ… Email/TÃ©lÃ©phone : ---
âœ… ConfidentialitÃ© : ---

---

Neuf ou usagÃ© ? (N/U)`;
      
      return summaryFormat;
    }
    
    // If not a brand, ask for the brand
    return WELCOME_MESSAGES[language];
  }
  
  // Build the conversation context from history
  const conversationContext = history.map((msg, index) => {
    return `${msg.role.toUpperCase()}: ${msg.content}`;
  }).join('\n\n');
  
  try {
    // Send the full conversation context to OpenAI with proper system prompt
    const response = await sendMessageToOpenAI(conversationContext, language);
    return response;
  } catch (error) {
    console.error('Error in chatWithSam:', error);
    const errorMessage = language === 'en' ? 
      'Sam is on sick leave ðŸ¤’' : 
      'Sam est en congÃ© de maladie ðŸ¤’';
    throw new Error(errorMessage);
  }
}